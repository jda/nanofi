package inform

import (
	"bytes"
	"encoding/json"
	"testing"

	"github.com/stretchr/testify/assert"
)

var sampleInformResponse1 = []byte{
	0x54, 0x4e, 0x42, 0x55, 0x00, 0x00, 0x00, 0x00,
	0x74, 0x83, 0xc2, 0x0f, 0x15, 0xb0, 0x00, 0x09,
	0x3d, 0x86, 0x7e, 0x3c, 0xcc, 0xd7, 0x80, 0x3f,
	0xdf, 0x7d, 0x29, 0x8a, 0x5d, 0x1c, 0x45, 0x24,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x53,
	0x06, 0x78, 0x81, 0x51, 0xcf, 0x9c, 0x8b, 0x14,
	0xa8, 0xdd, 0xdb, 0x02, 0x42, 0xc6, 0xa0, 0x3a,
	0x06, 0x89, 0x04, 0xbf, 0x8e, 0x0f, 0x2d, 0x13,
	0xb2, 0x5c, 0x27, 0xe0, 0x09, 0x99, 0xdb, 0x2f,
	0x56, 0xa1, 0x96, 0x8c, 0x3a, 0x7c, 0xcb, 0x3f,
	0xbc, 0x3a, 0xbc, 0x2f, 0x1a, 0x95, 0x35, 0x6d,
	0x4b, 0xa5, 0x6a, 0x3a, 0x33, 0x76, 0x26, 0xdc,
	0x39, 0x87, 0x95, 0x4c, 0x0f, 0x6f, 0xf3, 0x90,
	0x81, 0x80, 0xe7, 0x36, 0xc2, 0xa8, 0x71, 0xac,
	0x55, 0x15, 0xc4, 0x1f, 0xe8, 0x71, 0xda, 0x16,
	0x5d, 0x1b, 0x47,
}

var sampleInformResponse1Header = Header{
	Version:          0,
	HardwareAddr:     []byte{0x74, 0x83, 0xc2, 0x0f, 0x15, 0xb0},
	flagMask:         9,
	iv:               []byte{0x3d, 0x86, 0x7e, 0x3c, 0xcc, 0xd7, 0x80, 0x3f, 0xdf, 0x7d, 0x29, 0x8a, 0x5d, 0x1c, 0x45, 0x24},
	payloadVersion:   1,
	payloadLength:    83,
	EncryptedAES:     true,
	ZLibCompressed:   false,
	SnappyCompressed: false,
	EncryptedGCM:     true,
	aad:              sampleInformResponse1[0:40],
}

func TestDecodeInformResponse1(t *testing.T) {
	r := bytes.NewReader(sampleInformResponse1)
	out, err := DecodeHeader(r)
	assert.Nil(t, err, "successful decode should not return any errors")
	assert.Equal(t, sampleInformResponse1Header, out, "response should equal sample")

}

func TestDecodeInformResponse1Payload(t *testing.T) {
	r := bytes.NewReader(sampleInformResponse1)
	inform, err := DecodeHeader(r)
	assert.Nil(t, err, "if this fails, look at TestDecodeInformResponse1")
	payload, err := inform.DecodePayload(r, "")
	assert.Nil(t, err, "payload failed? we should check more specific error here")
	assert.True(t, json.Valid(payload), "payload is not valid json, so decode likely failed")
	t.Logf("payload: %s", payload)
}
